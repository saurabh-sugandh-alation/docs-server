SQL Server Connector: Install and Configure
===================================================

.. include:: /shared/ProductLabels/CloudAndCustomerManaged_Label.rst

Network Configuration
----------------------------

Open outbound TCP port **1433** to SQL Server (default).

.. note::

      SQL Server instances can listen on non-standard ports. If you connect Alation to a SQL Server instance, then open the appropriate outbound TCP ports from the Alation server.


Service Account
-----------------------------

Alation supports both `SQL Server authentication <https://docs.microsoft.com/en-us/sql/relational-databases/security/authentication-access/create-a-login?view=sql-server-ver16#create-a-login-using-sql-server-authentication-with-t-sql>`_ and `Windows authentication <https://docs.microsoft.com/en-us/sql/relational-databases/security/authentication-access/create-a-login?view=sql-server-ver16#TsqlProcedure>`_.

For Windows authentication, SQL Server must be configured for Kerberos, SQL Server default, or instance SPNs must be registered with Active Directory. The following information is required during configuration if SQL Server uses Windows authentication:

    - Active Directory realm
    - Active Directory server IP or DNS name

To verify that the SQL Server is configured for Kerberos, run the following command from a Windows CMD prompt. The command must be run on a computer in the same realm as SQL Server:

.. code-block:: Bash

      setspn -L [SQL-server-hostname]

The following screenshot is an example output of the ``setspn`` command showing SPNs for a SQL Server default instance:

    .. image:: ../../../_static/DS_SQLServer02.png
        :width: 600px

We recommend using an Active Directory service account. This enables Alation to read log files generated by extended events. A SQL Server username and password also reads log files generated by extended events.

Grant Permissions for Metadata Extraction
-------------------------------------------

Grant Access to Databases, Schemas, and Tables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Grant the service account access to the database(s), schema(s), and table(s) that you want to be cataloged in Alation after metadata extraction:

Grant Permissions on Database(s)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Grants the permissions to see the definitions of structures in the database, including tables, views, or stored procedures.

Set the connection to the desired database by using the following query:

.. code-block:: Bash
      
      USE <database_name>

After that, run the following query:

.. code-block:: Bash
      
      GRANT VIEW DEFINITION TO <alation_user>;

Note: Use this query for every database in an instance.


Grant Permissions on Specific Schema(s)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: Bash
      
      GRANT VIEW DEFINITION ON SCHEMA::<schema> TO <alation_user>;

Grant Permissions on Definitions of Any Object
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Grant permissions to see the definition of any object, such as endpoints, in any database users have at the server level:

.. code-block:: Bash
      
      Use master;
      GRANT VIEW ANY DEFINITION TO <alation_user>;


.. code-block:: Bash
      
      GRANT SELECT or VIEW ANY DEFINITION at Database or Schema level to alation (service account)

JDBC URI
-------------------

Depending on the type of your SQL Server deployment, Alation may support the following authentication types:

  - Basic authentication
  - NTLM authentication
  - Kerberos authentication
  - SSL authentication

Refer to :doc:`/sources/OpenConnectorFramework/SQLServer/SQLServerConnectorOverview` for details on which authentication methods are supported.

When building the URI, include the required components depending on the authentication method.

    .. note::

        Starting in version **1.1.4.1957**, the connector uses a SQL Server driver that assumes that the SSL mode is enabled by default unless the value ``encrypt=false`` is explicitly passed in the JDBC URI.

        The only exception is the Azure SQL Managed Instance data source, where basic authentication will work with or without explicitly including the parameter ``encrypt=false`` into the URI.

Basic/NTLM Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - Hostname or IP of the instance
  - Port number
  - Database name (optional)
  - The parameter ``encrypt=false`` to indicate that you are not using an SSL-enabled connection

*Applies from connector version 1.1.4:*

NTLM + SSL Authentication is supported from connector version **1.3.7.7492**

Append the parameter ``encrypt=false`` to the URI.

Format
^^^^^^^^^^

.. code-block:: Bash

      sqlserver://<Host_Name>:<Port_Number>;databaseName=<db_name>;encrypt=false

Example
^^^^^^^^^^

.. code-block:: Bash

      sqlserver://10.13.47.231:1433;databaseName=SQL;encrypt=false

.. note::

    For an Azure Managed Instance data source, both formats will work: ``sqlserver://<hostname or ip>:<port>;encrypt=false`` or ``sqlserver://<hostname or ip>:<port>``.


NTLM Authentication for Dynamic Port
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For dynamic port, leave the option **Enable NTLM** unchecked and don't specify a port number.


Format
^^^^^^^^^

.. code-block:: Bash

      sqlserver://<hostname or ip>;domain=<domain name>;authenticationScheme=NTLM;integratedSecurity=true;encrypt=false

Example
^^^^^^^^^^

.. code-block:: Bash

      sqlserver://10.13.80.247;domain=al100794.test.local;authenticationScheme=NTLM;integratedSecurity=true;encrypt=false


Kerberos Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - Hostname or IP of the instance
  - Port number
  - Server SPN (optional)
  - The parameter ``encrypt=false`` to indicate that you are not using an SSL-enabled connection

  .. note::

      Kerberos authentication requires the **krb5.conf** file to be uploaded in the **General Settings > Connector Settings** section when configuring the data source settings.

*Applies from connector version 1.1.4:*

Append the parameter ``encrypt=false`` to the URI.

Format
^^^^^^^^^^

.. code-block:: Bash

      sqlserver://<Host_name>:<Port_Number>;ServerSpn=<Server_SPN>;integratedSecurity=true;authenticationScheme=JavaKerberos;encrypt=false

Example
^^^^^^^^^^

.. code-block:: Bash

      sqlserver://10.13.47.231:1433;ServerSpn=MSSQLSvc/EC2DRTS-7FA6452.al94278.test.local;integratedSecurity=true;authenticationScheme=JavaKerberos;encrypt=false

SSL Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - Hostname or IP of the instance
  - Port number
  - The SSL-related parameters, such as
      - ``encrypt=true``
      - ``hostNameInCertificate=<CN name>``
            - To get the CN name, run the below command and use the value after **CN=**
            - ``openssl x509 -noout -subject -in <certificate_name>.crt``

      .. note::

          The SSL certificate must be uploaded in the **General Settings > Connector Settings** section when configuring the data source settings.

          NTLM + SSL Authentication is supported from connector version **1.3.7.7492**

*Applies from connector version 1.1.4:*

Append the parameter ``encrypt=true`` to the URI.

Format
^^^^^^^^^^

.. code-block:: Bash

      sqlserver://<Host_Name>:<Port_Number>;encrypt=true;hostNameInCertificate=<CN name>

Example
^^^^^^^^^^

.. code-block:: Bash

      sqlserver://10.13.82.165:1433;encrypt=true;hostNameInCertificate=abc.corp.net

Configuration in Alation
-----------------------------

STEP 1: Install the Connector
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: ../../../shared/OCF/OCF_ConnectorInstallation.rst

STEP 2: Create and Configure a New Data Source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: ../../../shared/OCF/OCFAccessMenu.rst

The name of this connector is **SQL Server OCF Connector**.

    .. image:: ../../../_static/SQLServerOCF_01.png
        :width: 350px
        :class: with-border

Access
----------

.. include:: ../../../shared/OCF/OCFAccessMenu.rst

General Settings
-----------------------

.. include:: ../../../shared/OCF/OCF_GeneralSettingsWithVaultConfigured.rst

Perform the configuration on the **General Settings** tab.

Application Settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: ../../../shared/OCF/OCF_GeneralSettings_ApplicationSettings.rst

Connector Settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Data Source Connection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. include:: ../../../shared/OCF/OCF_GeneralSettings_ConnectorSettings_4.rst

Logging Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. include:: ../../../shared/OCF/OCF_LoggingConfiguration.rst

You can view the connector logs in **Admin Settings** > **Manage Connectors** > **SQL Server OCF Connector**.

Obfuscate Literals
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: ../../../shared/OCF/OCF_ObfuscateLiterals.rst

Test Connection
~~~~~~~~~~~~~~~~~~~~~~~~~

Under Test Connection, click **Test** to validate network connectivity.

Deleting the Data Source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can delete your data source from the **General Settings** tab. Under **Delete Data Source**, click **Delete** to delete the data source connection.

    .. image:: ../../../_static/SQLServerOCF_02.png
        :width: 500px
        :class: with-border

Metadata Extraction
---------------------------

.. include:: ../../../shared/OCF/OCF_MDEIntroText.rst

The default queries that the connector uses to extract metadata can be found in :doc:`/sources/OpenConnectorFramework/SQLServer/SQLServerExtractionQueries`. You can customize these queries to adjust extraction to your specific needs.

Metadata Extraction from Compose
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If a table is created  from Compose, users will be able to see the relevant table metadata on the catalog page without re-running MDE.

Users should use the following query format to create tables in Compose:

  .. code-block:: Bash

        CREATE TABLE [CATALOG_NAME].[SCHEMA_NAME].[TABLE_NAME] ({column properties});

For creating view, catalog name needs to be included in the Compose JDBC URI on the **General Settings** page as **database=<Catalog_Name>**.

Use following query to create VIEW:

  .. code-block:: Bash

        USE [CATALOG_NAME]
        CREATE VIEW [SCHEMA_NAME].[TABLE_NAME] AS {view condition}


.. note::

      - When you create a view from Compose, the MDE job will get triggered automatically and fail with the error EmptyStreamException. Alternately, MDE can be run manually after creating the view to extract the view on the relevant catalog page.
      - For lineage to be generated successfully for View, fully qualified name of the table needs to be mentioned in the view condition.
      - For Drop table scenario, table will be removed from catalog page and automated MDE job will not be triggered. It is an expected behaviour.


Sampling and Profiling
-------------------------------

Sampling and profiling is supported. For details, see :doc:`/sources/OpenConnectorFramework/ConfigureSamplingforOCFDataSources`.

Compose
-----------

On the **Compose** tab, an admin can enable the use of the Compose tool for this data source.

  1. Before you enable Compose, provide the `JDBC URI`_ in the **Default Connection** field which Compose will use as a default connection and **Save**.

     .. image:: ../../../_static/SQLServerOCF_03.png
        :width: 500px
        :class: with-border

  2. Enable the **Enabled in Compose** toggle to enable Compose for this data source. Select **Compose Connection Sharing** option based on the description in the table below:

      +------------------------------+---------------------------------------------------------------+
      | **Compose Connection Option**| **Description**                                               |
      +==============================+===============================================================+
      | Shared connections across    | This option lets users use the same connection across multiple|
      | tabs                         | Compose tabs.                                                 |
      +------------------------------+---------------------------------------------------------------+
      | Separate connection per tab  | Users can use different connections for each Compose tab,     |
      |                              | which enables them to run multiple queries at the same time.  |
      +------------------------------+---------------------------------------------------------------+

  3. Select a Data Uploader option based on the description below:

     +------------------------------+---------------------------------------------------------------+
     | **Data Uploader**            | **Description**                                               |
     +==============================+===============================================================+
     | Use Global Setting (True)    | Use the global setting option that is set in **alation_conf** |
     |                              | using **alation.data_uploader.enabled** flag.                 |
     | or                           |                                                               |
     |                              | Users can upload data if the flag is set to **true** or if the|
     | Use Global Setting (False)   | flag is set to **false**, users cannot upload the data for any|
     |                              | data source.                                                  |
     +------------------------------+---------------------------------------------------------------+
     | Enable for this data source  | Use this option to enable the data upload for this data source|
     |                              | and override the global setting if the global setting in      |
     |                              | **alation_conf** if it is set to **false**.                   |
     +------------------------------+---------------------------------------------------------------+
     | Disable for this data source | Use this option to disable the data upload for this data      |
     |                              | source and override  the global setting in **alation_conf** if|
     |                              | it is set to **true**.                                        |
     +------------------------------+---------------------------------------------------------------+

      .. note::

           OAuth connection is not supported for this data source.

Query Log Ingestion
--------------------------------

See :doc:`/sources/OpenConnectorFramework/SQLServer/SQLServerConnectorQLI`.

For SQL Server RDS QLI, see :doc:`/sources/OpenConnectorFramework/SQLServer/SQLServerRDSQLI`.

Troubleshooting
---------------------

Refer to :doc:`Troubleshooting </sources/OpenConnectorFramework/OCFTroubleshooting>`.
